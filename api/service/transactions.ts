/**
 * Generated by orval v6.6.4 üç∫
 * Do not edit manually.
 * FastAPI
 * OpenAPI spec version: 0.1.0
 */
import {
  useQuery,
  UseQueryOptions,
  QueryFunction,
  UseQueryResult,
  QueryKey,
} from "react-query";
import type {
  Transaction,
  HTTPValidationError,
  GetTransactionsTransactionsGetParams,
} from "./models";
import { useAxios } from "../useAxios";

// eslint-disable-next-line @typescript-eslint/no-explicit-any
type AsyncReturnType<T extends (...args: any) => Promise<any>> = T extends (
  ...args: any
) => Promise<infer R>
  ? R
  : any;

/**
 * Get transactions from all available accounts, sorted by transaction date.
    
 * @summary Get Transactions
 */
export const useGetTransactionsTransactionsGetHook = () => {
  const getTransactionsTransactionsGet = useAxios<Transaction[]>();

  return (params?: GetTransactionsTransactionsGetParams) => {
    return getTransactionsTransactionsGet({
      url: `/transactions`,
      method: "get",
      params,
    });
  };
};

export const getGetTransactionsTransactionsGetQueryKey = (
  params?: GetTransactionsTransactionsGetParams
) => [`/transactions`, ...(params ? [params] : [])];

export const useGetTransactionsTransactionsGet = <
  TData = AsyncReturnType<
    ReturnType<typeof useGetTransactionsTransactionsGetHook>
  >,
  TError = HTTPValidationError
>(
  params?: GetTransactionsTransactionsGetParams,
  options?: {
    query?: UseQueryOptions<
      AsyncReturnType<ReturnType<typeof useGetTransactionsTransactionsGetHook>>,
      TError,
      TData
    >;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions } = options || {};

  const queryKey =
    queryOptions?.queryKey ?? getGetTransactionsTransactionsGetQueryKey(params);

  const getTransactionsTransactionsGet =
    useGetTransactionsTransactionsGetHook();

  const queryFn: QueryFunction<
    AsyncReturnType<ReturnType<typeof useGetTransactionsTransactionsGetHook>>
  > = () => getTransactionsTransactionsGet(params);

  const query = useQuery<
    AsyncReturnType<ReturnType<typeof useGetTransactionsTransactionsGetHook>>,
    TError,
    TData
  >(queryKey, queryFn, queryOptions);

  return {
    queryKey,
    ...query,
  };
};

/**
 * @summary Get Settled Transactions For Account
 */
export const useGetSettledTransactionsForAccountAccountTypeNameAccountNameTransactionsGetHook =
  () => {
    const getSettledTransactionsForAccountAccountTypeNameAccountNameTransactionsGet =
      useAxios<Transaction[]>();

    return (typeName: string, accountName: string) => {
      return getSettledTransactionsForAccountAccountTypeNameAccountNameTransactionsGet(
        {
          url: `/account/${typeName}/${accountName}/transactions`,
          method: "get",
        }
      );
    };
  };

export const getGetSettledTransactionsForAccountAccountTypeNameAccountNameTransactionsGetQueryKey =
  (typeName: string, accountName: string) => [
    `/account/${typeName}/${accountName}/transactions`,
  ];

export const useGetSettledTransactionsForAccountAccountTypeNameAccountNameTransactionsGet =
  <
    TData = AsyncReturnType<
      ReturnType<
        typeof useGetSettledTransactionsForAccountAccountTypeNameAccountNameTransactionsGetHook
      >
    >,
    TError = HTTPValidationError
  >(
    typeName: string,
    accountName: string,
    options?: {
      query?: UseQueryOptions<
        AsyncReturnType<
          ReturnType<
            typeof useGetSettledTransactionsForAccountAccountTypeNameAccountNameTransactionsGetHook
          >
        >,
        TError,
        TData
      >;
    }
  ): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const { query: queryOptions } = options || {};

    const queryKey =
      queryOptions?.queryKey ??
      getGetSettledTransactionsForAccountAccountTypeNameAccountNameTransactionsGetQueryKey(
        typeName,
        accountName
      );

    const getSettledTransactionsForAccountAccountTypeNameAccountNameTransactionsGet =
      useGetSettledTransactionsForAccountAccountTypeNameAccountNameTransactionsGetHook();

    const queryFn: QueryFunction<
      AsyncReturnType<
        ReturnType<
          typeof useGetSettledTransactionsForAccountAccountTypeNameAccountNameTransactionsGetHook
        >
      >
    > = () =>
      getSettledTransactionsForAccountAccountTypeNameAccountNameTransactionsGet(
        typeName,
        accountName
      );

    const query = useQuery<
      AsyncReturnType<
        ReturnType<
          typeof useGetSettledTransactionsForAccountAccountTypeNameAccountNameTransactionsGetHook
        >
      >,
      TError,
      TData
    >(queryKey, queryFn, {
      enabled: !!(typeName && accountName),
      ...queryOptions,
    });

    return {
      queryKey,
      ...query,
    };
  };

/**
 * @summary Get Settled Transactions For Account Days
 */
export const useGetSettledTransactionsForAccountDaysAccountTypeNameAccountNameTransactionsDaysGetHook =
  () => {
    const getSettledTransactionsForAccountDaysAccountTypeNameAccountNameTransactionsDaysGet =
      useAxios<Transaction[]>();

    return (typeName: string, accountName: string, days: number) => {
      return getSettledTransactionsForAccountDaysAccountTypeNameAccountNameTransactionsDaysGet(
        {
          url: `/account/${typeName}/${accountName}/transactions/${days}`,
          method: "get",
        }
      );
    };
  };

export const getGetSettledTransactionsForAccountDaysAccountTypeNameAccountNameTransactionsDaysGetQueryKey =
  (typeName: string, accountName: string, days: number) => [
    `/account/${typeName}/${accountName}/transactions/${days}`,
  ];

export const useGetSettledTransactionsForAccountDaysAccountTypeNameAccountNameTransactionsDaysGet =
  <
    TData = AsyncReturnType<
      ReturnType<
        typeof useGetSettledTransactionsForAccountDaysAccountTypeNameAccountNameTransactionsDaysGetHook
      >
    >,
    TError = HTTPValidationError
  >(
    typeName: string,
    accountName: string,
    days: number,
    options?: {
      query?: UseQueryOptions<
        AsyncReturnType<
          ReturnType<
            typeof useGetSettledTransactionsForAccountDaysAccountTypeNameAccountNameTransactionsDaysGetHook
          >
        >,
        TError,
        TData
      >;
    }
  ): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const { query: queryOptions } = options || {};

    const queryKey =
      queryOptions?.queryKey ??
      getGetSettledTransactionsForAccountDaysAccountTypeNameAccountNameTransactionsDaysGetQueryKey(
        typeName,
        accountName,
        days
      );

    const getSettledTransactionsForAccountDaysAccountTypeNameAccountNameTransactionsDaysGet =
      useGetSettledTransactionsForAccountDaysAccountTypeNameAccountNameTransactionsDaysGetHook();

    const queryFn: QueryFunction<
      AsyncReturnType<
        ReturnType<
          typeof useGetSettledTransactionsForAccountDaysAccountTypeNameAccountNameTransactionsDaysGetHook
        >
      >
    > = () =>
      getSettledTransactionsForAccountDaysAccountTypeNameAccountNameTransactionsDaysGet(
        typeName,
        accountName,
        days
      );

    const query = useQuery<
      AsyncReturnType<
        ReturnType<
          typeof useGetSettledTransactionsForAccountDaysAccountTypeNameAccountNameTransactionsDaysGetHook
        >
      >,
      TError,
      TData
    >(queryKey, queryFn, {
      enabled: !!(typeName && accountName && days),
      ...queryOptions,
    });

    return {
      queryKey,
      ...query,
    };
  };
