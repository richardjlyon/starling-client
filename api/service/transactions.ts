/**
 * Generated by orval v6.6.4 üç∫
 * Do not edit manually.
 * FastAPI
 * OpenAPI spec version: 0.1.0
 */
import {
  useQuery,
  UseQueryOptions,
  QueryFunction,
  UseQueryResult,
  QueryKey,
} from "react-query";
import type {
  Transaction,
  HTTPValidationError,
  GetTransactionsParams,
} from "./models";
import { useAxios } from "../useAxios";

// eslint-disable-next-line @typescript-eslint/no-explicit-any
type AsyncReturnType<T extends (...args: any) => Promise<any>> = T extends (
  ...args: any
) => Promise<infer R>
  ? R
  : any;

/**
 * Get transactions from all available accounts, sorted by transaction date.
    
 * @summary Get Transactions
 */
export const useGetTransactionsHook = () => {
  const getTransactions = useAxios<Transaction[]>();

  return (params?: GetTransactionsParams) => {
    return getTransactions({ url: `/transactions`, method: "get", params });
  };
};

export const getGetTransactionsQueryKey = (params?: GetTransactionsParams) => [
  `/transactions`,
  ...(params ? [params] : []),
];

export const useGetTransactions = <
  TData = AsyncReturnType<ReturnType<typeof useGetTransactionsHook>>,
  TError = HTTPValidationError
>(
  params?: GetTransactionsParams,
  options?: {
    query?: UseQueryOptions<
      AsyncReturnType<ReturnType<typeof useGetTransactionsHook>>,
      TError,
      TData
    >;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions } = options || {};

  const queryKey = queryOptions?.queryKey ?? getGetTransactionsQueryKey(params);

  const getTransactions = useGetTransactionsHook();

  const queryFn: QueryFunction<
    AsyncReturnType<ReturnType<typeof useGetTransactionsHook>>
  > = () => getTransactions(params);

  const query = useQuery<
    AsyncReturnType<ReturnType<typeof useGetTransactionsHook>>,
    TError,
    TData
  >(queryKey, queryFn, queryOptions);

  return {
    queryKey,
    ...query,
  };
};

/**
 * @summary Get Settled Transactions For Account
 */
export const useGetSettledTransactionsForAccountHook = () => {
  const getSettledTransactionsForAccount = useAxios<Transaction[]>();

  return (typeName: string, accountName: string) => {
    return getSettledTransactionsForAccount({
      url: `/account/${typeName}/${accountName}/transactions`,
      method: "get",
    });
  };
};

export const getGetSettledTransactionsForAccountQueryKey = (
  typeName: string,
  accountName: string
) => [`/account/${typeName}/${accountName}/transactions`];

export const useGetSettledTransactionsForAccount = <
  TData = AsyncReturnType<
    ReturnType<typeof useGetSettledTransactionsForAccountHook>
  >,
  TError = HTTPValidationError
>(
  typeName: string,
  accountName: string,
  options?: {
    query?: UseQueryOptions<
      AsyncReturnType<
        ReturnType<typeof useGetSettledTransactionsForAccountHook>
      >,
      TError,
      TData
    >;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions } = options || {};

  const queryKey =
    queryOptions?.queryKey ??
    getGetSettledTransactionsForAccountQueryKey(typeName, accountName);

  const getSettledTransactionsForAccount =
    useGetSettledTransactionsForAccountHook();

  const queryFn: QueryFunction<
    AsyncReturnType<ReturnType<typeof useGetSettledTransactionsForAccountHook>>
  > = () => getSettledTransactionsForAccount(typeName, accountName);

  const query = useQuery<
    AsyncReturnType<ReturnType<typeof useGetSettledTransactionsForAccountHook>>,
    TError,
    TData
  >(queryKey, queryFn, {
    enabled: !!(typeName && accountName),
    ...queryOptions,
  });

  return {
    queryKey,
    ...query,
  };
};

/**
 * @summary Get Settled Transactions For Account Days
 */
export const useGetSettledTransactionsForAccountDaysHook = () => {
  const getSettledTransactionsForAccountDays = useAxios<Transaction[]>();

  return (typeName: string, accountName: string, days: number) => {
    return getSettledTransactionsForAccountDays({
      url: `/account/${typeName}/${accountName}/transactions/${days}`,
      method: "get",
    });
  };
};

export const getGetSettledTransactionsForAccountDaysQueryKey = (
  typeName: string,
  accountName: string,
  days: number
) => [`/account/${typeName}/${accountName}/transactions/${days}`];

export const useGetSettledTransactionsForAccountDays = <
  TData = AsyncReturnType<
    ReturnType<typeof useGetSettledTransactionsForAccountDaysHook>
  >,
  TError = HTTPValidationError
>(
  typeName: string,
  accountName: string,
  days: number,
  options?: {
    query?: UseQueryOptions<
      AsyncReturnType<
        ReturnType<typeof useGetSettledTransactionsForAccountDaysHook>
      >,
      TError,
      TData
    >;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions } = options || {};

  const queryKey =
    queryOptions?.queryKey ??
    getGetSettledTransactionsForAccountDaysQueryKey(
      typeName,
      accountName,
      days
    );

  const getSettledTransactionsForAccountDays =
    useGetSettledTransactionsForAccountDaysHook();

  const queryFn: QueryFunction<
    AsyncReturnType<
      ReturnType<typeof useGetSettledTransactionsForAccountDaysHook>
    >
  > = () => getSettledTransactionsForAccountDays(typeName, accountName, days);

  const query = useQuery<
    AsyncReturnType<
      ReturnType<typeof useGetSettledTransactionsForAccountDaysHook>
    >,
    TError,
    TData
  >(queryKey, queryFn, {
    enabled: !!(typeName && accountName && days),
    ...queryOptions,
  });

  return {
    queryKey,
    ...query,
  };
};
