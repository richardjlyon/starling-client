/**
 * Generated by orval v6.6.4 üç∫
 * Do not edit manually.
 * FastAPI
 * OpenAPI spec version: 0.1.0
 */
import {
  useQuery,
  UseQueryOptions,
  QueryFunction,
  UseQueryResult,
  QueryKey,
} from "react-query";
import type { StarlingConfig, HTTPValidationError } from "./models";
import { useAxios } from "../useAxios";

// eslint-disable-next-line @typescript-eslint/no-explicit-any
type AsyncReturnType<T extends (...args: any) => Promise<any>> = T extends (
  ...args: any
) => Promise<infer R>
  ? R
  : any;

/**
 * @summary Get Accounts
 */
export const useGetAccountsHook = () => {
  const getAccounts = useAxios<StarlingConfig>();

  return () => {
    return getAccounts({ url: `/accounts`, method: "get" });
  };
};

export const getGetAccountsQueryKey = () => [`/accounts`];

export const useGetAccounts = <
  TData = AsyncReturnType<ReturnType<typeof useGetAccountsHook>>,
  TError = unknown
>(options?: {
  query?: UseQueryOptions<
    AsyncReturnType<ReturnType<typeof useGetAccountsHook>>,
    TError,
    TData
  >;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions } = options || {};

  const queryKey = queryOptions?.queryKey ?? getGetAccountsQueryKey();

  const getAccounts = useGetAccountsHook();

  const queryFn: QueryFunction<
    AsyncReturnType<ReturnType<typeof useGetAccountsHook>>
  > = () => getAccounts();

  const query = useQuery<
    AsyncReturnType<ReturnType<typeof useGetAccountsHook>>,
    TError,
    TData
  >(queryKey, queryFn, queryOptions);

  return {
    queryKey,
    ...query,
  };
};

/**
 * @summary Get Account Balance
 */
export const useGetAccountBalanceHook = () => {
  const getAccountBalance = useAxios<number>();

  return (typeName: string, accountName: string) => {
    return getAccountBalance({
      url: `/account/${typeName}/${accountName}/balance`,
      method: "get",
    });
  };
};

export const getGetAccountBalanceQueryKey = (
  typeName: string,
  accountName: string
) => [`/account/${typeName}/${accountName}/balance`];

export const useGetAccountBalance = <
  TData = AsyncReturnType<ReturnType<typeof useGetAccountBalanceHook>>,
  TError = HTTPValidationError
>(
  typeName: string,
  accountName: string,
  options?: {
    query?: UseQueryOptions<
      AsyncReturnType<ReturnType<typeof useGetAccountBalanceHook>>,
      TError,
      TData
    >;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions } = options || {};

  const queryKey =
    queryOptions?.queryKey ??
    getGetAccountBalanceQueryKey(typeName, accountName);

  const getAccountBalance = useGetAccountBalanceHook();

  const queryFn: QueryFunction<
    AsyncReturnType<ReturnType<typeof useGetAccountBalanceHook>>
  > = () => getAccountBalance(typeName, accountName);

  const query = useQuery<
    AsyncReturnType<ReturnType<typeof useGetAccountBalanceHook>>,
    TError,
    TData
  >(queryKey, queryFn, {
    enabled: !!(typeName && accountName),
    ...queryOptions,
  });

  return {
    queryKey,
    ...query,
  };
};
